
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    .create-account-popup form {
  max-width: 300px;
  margin: 0 auto;
}

.create-account-popup form label {
  display: block;
  margin-bottom: 10px;
}

.create-account-popup form input[type="text"],
.create-account-popup form input[type="email"],
.create-account-popup form input[type="password"] {
  width: calc(100% - 10px);
  padding: 8px;
  margin-bottom: 10px;
}

.create-account-popup form button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  margin-top: 10px;
}

.create-account-popup form button:hover {
  background-color: #0056b3;
}
.create-account-popup form button {
  margin-top: 10px; /* Add margin-top to the button */
}

    .create-account-popup {
      /* display: none; */
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 20px;
      background: #f8b2b2;
      border: 19px solid #ff4848;
      box-shadow: 20px -19px 10px rgba(0, 0, 0, 0.1);
      z-index: 1;
    }

    
    .auth-buttons {
      margin-top: 20px;
      text-align: center;
    }

    .auth-buttons button {
      padding: 10px 20px;
      margin-right: 10px;
      background-color: #007bff;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    /* Styles for login and create account popups */
    .popup {
      /* Existing styles... */
      width: 300px;
    }

    .popup input[type="text"],
    .popup input[type="password"] {
      width: calc(100% - 20px);
    }

    /* Styles for logout button */
    .logout-button {
      background-color: #dc3545;
    }
    body {
      font-family: Arial, sans-serif;
      background-color: #f4f4f4;
      margin: 0;
      padding: 0;
    }
    .container {
      max-width: 1600px;
      margin: 0 auto;
      background-color: #fff;
      padding: 20px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
    .tabs {
      display: flex;
      justify-content: space-between;
      margin-bottom: 20px;
    }
    .tabs button {
      background-color: #146304;
      color: white;
      padding: 10px 15px;
      margin: 5px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    #counters {
      margin-top: 20px;
    }
    .admin-container, .User-container {
      display: none;
    }
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 10px;
    }
    table, th, td {
      border: 1px solid #ddd;
    }
    th, td {
      padding: 10px;
      text-align: left;
    }
    th {
      background-color: #f2f2f2;
    }
    .status {
      font-weight: bold;
    }
    .green { color: green; }
    .red { color: red; }
    .yellow { color: yellow; }
    .orange { color: orange; }
    .popup {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 59px;
      background: #ff9a9a;
      border: 1px solid #3d0000;
      box-shadow: 14px -20px 10px 6px rgb(148 0 0 / 10%);
      z-index: 1;
    }
    .popup label {
      display: block;
      margin-bottom: 10px;
    }
    .popup input {
      width: 100%;
      padding: 8px;
      margin-bottom: 10px;
    }
    .popup button {
      padding: 10px;
      background: #4caf50;
      color: #fff;
      border: none;
      cursor: pointer;
    }
    .clear-button {
      margin-top: 10px;
      padding: 10px;
      background-color: #ff704d;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    canvas {
      margin-top: 20px;
    }
    .welcome-message {
      margin-bottom: 10px;
    }
    .User-buttons {
      margin-top: 10px;
      display: flex;
      justify-content: center;
    }
    .User-buttons button {
      background-color: #0e32ff;
      color: white;
      padding: 10px 15px;
      margin-right: 5px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    .User-form {
      margin-top: 20px;
    }
    .User-form label,
    .User-form input,
    .User-form textarea,
    .User-form select,
    .User-form button {
      margin-bottom: 10px;
      display: block;
      width: 100%;
      box-sizing: border-box;
    }
    .User-form button {
      background-color: #ec280e;
      color: white;
      padding: 10px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }
    .User-form input,
    .User-form textarea,
    .User-form select {
      padding: 8px;
    }
    .blue { color: blue; }
  </style>
  <script src="https://cdn.jsdelivr.net/npm/chart.js/dist/Chart.min.js"></script>

  <title>Public Complaint Resolution Platform</title>
</head>
<body>
  <div class="container">
    <div class="tabs">
      <button onclick="showAdminWindow()">Admin Window</button>
      <h2>WELCOME TO PUBLIC COMPLAINT RESOLUTION PLATFORM</h2>
      <button onclick="showLoginPopup()">User Window</button>
    </div>
    <div class="auth-buttons">
      <button onclick="showLoginPopup()">Login</button>
      <button onclick="showCreateAccountPopup()">Create Account</button>
      <button class="logout-button" id="logoutButton" style="display: none;">Logout</button>
      <div id="createAccountPopup" class="create-account-popup">
        <h2>Create Account</h2>
        <form>
        <label for="newUserUsername">Username:</label>
        <input type="text" id="newUserUsername" required>
        <label for="newUserEmail">Email:</label>
        <input type="email" id="newUserEmail" required>
        <label for="newUserPassword">Password:</label>
        <input type="password" id="newUserPassword" required>
        


        <button onclick="createUserAccount()">Create Account</button>
      </form>
      </div>
    </div>


    <div class="admin-container" id="adminContainer">
      <h2>Admin Window</h2>
      <div id="loginInfo"></div>
      <div id="counters">
        <h3>Status Counters</h3>
        <div>
          <strong>Total:</strong> <span id="totalComplaints" class="blue">0</span>
        </div>
        <div>
          <strong>Solved:</strong> <span id="totalSolved" class="green">0</span>
        </div>
        <div>
          <strong>Unsolved:</strong> <span id="totalUnsolved" class="red">0</span>
        </div>
        <div>
          <strong>In Progress:</strong> <span id="totalInProgress" class="yellow">0</span>
        </div>
        <div>
          <strong>Pending:</strong> <span id="totalPending" class="orange">0</span>
        </div>
      </div>

      <div id="statistics">
        <h3>Statistics</h3>
        <canvas id="statisticsChart" width="400" height="200"></canvas>
      </div>
      <div id="complaintTable">
        <h3>Complaints Table</h3>
        <table id="complaints">
          <thead>
            <tr>
              <th>ID</th>
              <th>Complainant Name</th>
              <th>Complainant Phone</th>
              <th>Subject</th>
              <th>Description</th>
              <th>Complaint Type</th>   
              <th>Department</th>          
              <th>Action</th>
              <th>Status</th>
              <th>Send Description</th>
              
              
            </tr>
          </thead>
          <tbody id="complaintTableBody"></tbody>
        </table>
        <button class="clear-button" onclick="clearComplaints()">Clear Complaints</button>
      </div>
    </div>

    <div class="User-container" id="UserContainer">
      <h2>User Window</h2>
      <div class="User-buttons">
        <button onclick="showUserHome()">Home</button>
        <button onclick="showUserAbout()">About</button>
        <button onclick="checkComplaintStatus()">Check Complaint Status</button>
      </div>
      <div id="actionerMessage" style="display: none;"></div>
      <div class="welcome-message" id="welcomeMessage"></div>
      <div id="UserContent">
        <!-- Add your content for the User window here -->
        <div>
          <p>This is some useful information about our services.</p>
        </div>
      </div>
      <div class="User-form" id="UserForm">
        <h3>Submit a Complaint</h3>
        <label for="complainantName">Complainant Name:</label>
        <input type="text" id="complainantName" required>
        
        <label for="complainantPhone">Complainant Phone:</label>
        <input type="text" id="complainantPhone" required>
        <label for="complaintSubject">Subject:</label>
        <input type="text" id="complaintSubject" required>
        
        <label for="complaintDescription">Description:</label>
        <textarea id="complaintDescription" required></textarea>
        
        <label for="complaintType">Complaint Type:</label>
        <select id="complaintType">
          <option value="billing">Billing</option>
          <option value="technical">Technical</option>
          <option value="service">Service</option>
        </select>
        <label for="issueDate">Issue Date:</label>
        <input type="date" id="issueDate" required>
        <label for="department">Select Department:</label>
<select id="department">
  <option value="CM Special Cell">CM Special Cell</option>
  <option value="District Administrative Cell">District Administrative Cell</option>
  <option value="District Corporation Cell">District Corporation Cell</option>
  <option value="Water Supply and Sewerage Cell">Water Supply and Sewerage Cell</option>
  <option value="Civil Supplies and Consumer Protection Cell">Civil Supplies and Consumer Protection Cell</option>
  <option value="Police Department Cell">Police Department Cell</option>
  <option value="Aavin Cell">Aavin Cell</option>
  <option value="Electricity Board cell">Electricity Board cell</option>
</select>
        
        <button onclick="submitComplaint()">Submit Complaint</button>
      </div>
      <div id="complaintNumber" style="display: none;"></div>
    </div>

    <div id="loginPopup" class="popup">
      <h2>Login</h2>
      <label for="UserUsername">User Username:</label>
      <input type="text" id="UserUsername" required>
      <label for="UserPassword">User Password:</label>
      <input type="password" id="UserPassword" required>
      <button type="button" onclick="UserLogin()">Login</button>
    </div>
  </div>

  <script>
        // Define userData variable for storing user data
        const userData = localStorage.getItem('userData') ? JSON.parse(localStorage.getItem('userData')) : [];
    const complaintsData = localStorage.getItem('complaints') ? JSON.parse(localStorage.getItem('complaints')) : [];
    let loggedInUser = null;

    function saveComplaintsToLocalStorage() {
      localStorage.setItem('complaints', JSON.stringify(complaintsData));
    }
    // Function to save user data to local storage
    function saveUserDataToLocalStorage() {
      localStorage.setItem('userData', JSON.stringify(userData));
    }

    function showAdminWindow() {
      const adminUsername = prompt('Enter Admin Username:');
      const adminPassword = prompt('Enter Admin Password:');

      if (adminUsername === 'cmsadmin' && adminPassword === 'cmsadmin@123') {
        loggedInUser = 'cmsadmin';
        document.getElementById('loginInfo').innerText = `Logged in as: ${loggedInUser}`;
        document.getElementById('adminContainer').style.display = 'block';
        document.getElementById('UserContainer').style.display = 'none';
        document.getElementById('loginPopup').style.display = 'none';
            // Hide the "Create Account" popup
    document.getElementById('createAccountPopup').style.display = 'none';

        // Display statistics
        displayStatistics();

        // Display complaints table
        displayComplaintsTable();
      } else {
        alert('Invalid credentials. Please enter correct username and password.');
      }
    }
    function initializeUserAuth() {
  const loginButton = document.getElementById('loginButton');
  const createAccountButton = document.getElementById('createAccountButton');
  const logoutButton = document.getElementById('logoutButton');

  if (loginButton) {
    loginButton.addEventListener('click', showLoginPopup);
  }

  if (createAccountButton) {
    createAccountButton.addEventListener('click', showCreateAccountPopup);
  }

  if (logoutButton) {
    logoutButton.addEventListener('click', userLogout);
  }
}

    function showLoginPopup() {
      document.getElementById('adminContainer').style.display = 'none';
  document.getElementById('UserContainer').style.display = 'none';
  hideCreateAccountPopup();
  
  document.getElementById('loginPopup').style.display = 'block';
    }
    function hideCreateAccountPopup() {
  document.getElementById('createAccountPopup').style.display = 'none';
}
    function UserLogin() {
      const username = document.getElementById('UserUsername').value;
      const password = document.getElementById('UserPassword').value;
      const user = userData.find(user => user.username === username && user.password === password);
  if (user) {
    loggedInUser = user.username;
    document.getElementById('welcomeMessage').innerText = `Welcome, ${loggedInUser}!`;
    document.getElementById('adminContainer').style.display = 'none';
    document.getElementById('UserContainer').style.display = 'block';
    document.getElementById('loginPopup').style.display = 'none';
  } else {
    alert('Invalid username or password. Please try again or create a new account.');
  }
  hideCreateAccountPopup();
}
function showCreateAccountPopup() {
  document.getElementById('adminContainer').style.display = 'none';
  document.getElementById('UserContainer').style.display = 'none';
  document.getElementById('loginPopup').style.display = 'none'; // Hide login popup if already open
  document.getElementById('createAccountPopup').style.display = 'block';
}
function createUserAccount() {
  const username = document.getElementById('newUserUsername').value;
  const email = document.getElementById('newUserEmail').value;
  const password = document.getElementById('newUserPassword').value;

  // Check if username or email already exists
  const existingUser = userData.find(user => user.username === username || user.email === email);
  if (existingUser) {
    alert('Username or email already exists. Please choose a different one.');
  } else {
    // Add new user to userData array and save to local storage
    userData.push({ username, email, password });
    saveUserDataToLocalStorage(); // Assuming you have a function to save user data to local storage

    // Log in the new user
    loggedInUser = username;
    document.getElementById('welcomeMessage').innerText = `Welcome, ${loggedInUser}!`;
    document.getElementById('adminContainer').style.display = 'none';
    document.getElementById('UserContainer').style.display = 'block';
    document.getElementById('createAccountPopup').style.display = 'none';
  }
}
function userLogout() {
  loggedInUser = null;
  document.getElementById('UserContainer').style.display = 'none';
  document.getElementById('welcomeMessage').innerText = '';
  showLoginPopup(); // Show login popup again after logout
}

// Call the initialization function when the DOM content is loaded
document.addEventListener('DOMContentLoaded', initializeUserAuth);

    function showUserHome() {
      document.getElementById('UserContent').innerHTML = '<p>Welcome to the User Home Page!</p>';
    }

    function showUserAbout() {
      document.getElementById('UserContent').innerHTML = '<p>This is the About Page with some useful information.</p>';
    }

    function displayStatistics() {
      const totalComplaintsElement = document.getElementById('totalComplaints');
      const totalSolvedElement = document.getElementById('totalSolved');
      const totalUnsolvedElement = document.getElementById('totalUnsolved');
      const totalInProgressElement = document.getElementById('totalInProgress');
      const totalPendingElement = document.getElementById('totalPending');

      if (
        totalComplaintsElement &&
        totalSolvedElement &&
        totalUnsolvedElement &&
        totalInProgressElement &&
        totalPendingElement
      ) {
        const totalComplaints = complaintsData.length;
        const totalSolved = complaintsData.filter(complaint => complaint.status === 'solved').length;
        const totalUnsolved = complaintsData.filter(complaint => complaint.status === 'unsolved').length;
        const totalInProgress = complaintsData.filter(complaint => complaint.status === 'inprogress').length;
        const totalPending = complaintsData.filter(complaint => complaint.status === 'pending').length;

        totalComplaintsElement.innerText = totalComplaints;
        totalSolvedElement.innerText = totalSolved;
        totalUnsolvedElement.innerText = totalUnsolved;
        totalInProgressElement.innerText = totalInProgress;
        totalPendingElement.innerText = totalPending;

        // Display a simple statistics chart
        const ctx = document.getElementById('statisticsChart').getContext('2d');

        // Check if the canvas element exists before rendering the chart
        if (ctx) {
          const chart = new Chart(ctx, {
            type: 'bar',
            data: {
              labels: ['Total', 'Solved', 'Unsolved', 'In Progress', 'Pending'],
              datasets: [{
                label: 'Complaints',
                data: [totalComplaints, totalSolved, totalUnsolved, totalInProgress, totalPending],
                backgroundColor: [
                  'rgba(75, 192, 192, 0.2)',
                  'rgba(0, 128, 0, 0.2)',
                  'rgba(255, 0, 0, 0.2)',
                  'rgba(255, 255, 0, 0.2)',
                  'rgba(255, 165, 0, 0.2)',
                ],
                borderColor: [
                  'rgba(75, 192, 192, 1)',
                  'rgba(0, 128, 0, 1)',
                  'rgba(255, 0, 0, 1)',
                  'rgba(255, 255, 0, 1)',
                  'rgba(255, 165, 0, 1)',
                ],
                borderWidth: 1,
              }],
            },
          });
        } else {
          console.error('Canvas element not found. Check your HTML structure.');
        }
      } else {
        console.error('One or more elements not found. Check your HTML structure.');
      }
    }

    function displayComplaintsTable() {
  const complaintTableBody = document.getElementById('complaintTableBody');
  complaintTableBody.innerHTML = '';

  complaintsData.forEach((complaint, index) => {
    const row = `<tr>
      <td>${complaint.issueDate}</td> <!-- Display epoch time -->
      
      <td>${complaint.complainantName}</td>
      <td>${complaint.complainantPhone}</td>
      <td>${complaint.subject}</td>
      <td>${complaint.description}</td>
      <td>${complaint.complaintType}</td>
      <td>${complaint.department}</td>
      <td class="status ${getStatusColor(complaint.status)}">${complaint.status}</td>
      <td class="dropdown">
        <button onclick="markStatus(${index})">Mark Status</button>
        <div class="dropdown-content">
          <a href="#" onclick="changeComplaintStatus(${index}, 'solved')">Solved</a>
          <a href="#" onclick="changeComplaintStatus(${index}, 'unsolved')">Unsolved</a>
          <a href="#" onclick="changeComplaintStatus(${index}, 'inprogress')">In Progress</a>
          <a href="#" onclick="changeComplaintStatus(${index}, 'pending')">Pending</a>
        </div>
      </td>
      <td><textarea id="description_${index}" placeholder="Enter Description"></textarea></td>
<td><button onclick="sendDescriptionToUser(${index})">Send</button></td>
    </tr>`;
    complaintTableBody.innerHTML += row;
  });
}
    function getStatusColor(status) {
      switch (status) {
        case 'solved':
          return 'green';
        case 'unsolved':
          return 'red';
        case 'inprogress':
          return 'yellow';
        case 'pending':
          return 'orange';
        default:
          return '';
      }
    }
    function sendDescriptionToUser(index) {
  const description = document.getElementById(`description_${index}`).value;
  complaintsData[index].description = description;
  saveComplaintsToLocalStorage();

  // Display the description in the user window
  document.getElementById('actionerMessage').innerText = `Actioner Message: ${description}`;
  document.getElementById('actionerMessage').style.display = 'block';
}
    function submitComplaint() {
  if (loggedInUser === 'cmsadmin') {
    alert('Admin cannot submit complaints. Please log in as a User.');
    return;
  }

  const subject = document.getElementById('complaintSubject').value;
  const description = document.getElementById('complaintDescription').value;
  const complaintType = document.getElementById('complaintType').value;
  const complainantName = document.getElementById('complainantName').value;
  const complainantPhone = document.getElementById('complainantPhone').value;
  const issueDate = document.getElementById('issueDate').value;
  const department = document.getElementById('department').value;
  const complaintEpochTime = Date.now(); // Epoch time in milliseconds
  document.getElementById('complaintNumber').innerText = `Your complaint number is: ${complaintEpochTime}`;
  document.getElementById('complaintNumber').style.display = 'block';

  const newComplaint = {
    subject,
    description,
    complaintType,
    complainantName,
    complainantPhone,
    issueDate: complaintEpochTime, // Save epoch time as issueDate
    department,
    status: 'pending',
  };

  complaintsData.push(newComplaint);
  saveComplaintsToLocalStorage();

  // Clear the form fields
  document.getElementById('complaintSubject').value = '';
  document.getElementById('complaintDescription').value = '';
  document.getElementById('complaintType').value = 'billing';
  document.getElementById('complainantName').value = '';
  document.getElementById('complainantPhone').value = '';
  document.getElementById('issueDate').value = '';

  // Update admin window
  displayStatistics();
  displayComplaintsTable();
}
function checkComplaintStatus() {
  const complaintEpochTime = prompt('Enter your complaint number (epoch time):');
  const complaint = complaintsData.find(complaint => complaint.issueDate == complaintEpochTime);

  if (complaint) {
    const description = complaint.description;
    alert(`Actioner Message: ${description}\nYour complaint status: ${complaint.status}`);
  } else {
    alert('Complaint not found.');
  }
}

function checkComplaintStatusAdmin() {
  const complaintEpochTime = prompt('Enter the complaint number (epoch time):');
  const complaint = complaintsData.find(complaint => complaint.issueDate == complaintEpochTime);

  if (complaint) {
    const description = complaint.description;
    alert(`Actioner Message: ${description}\nComplaint status: ${complaint.status}`);
  } else {
    alert('Complaint not found.');
  }
}

    function markStatus(index) {
      // Placeholder function for marking status using the dropdown
    }

    function changeComplaintStatus(index, newStatus) {
      complaintsData[index].status = newStatus;
      saveComplaintsToLocalStorage();

      // Update admin window
      displayStatistics();
      displayComplaintsTable();
    }

    function clearComplaints() {
      if (loggedInUser === 'cmsadmin') {
        const confirmation = confirm('Are you sure you want to clear all complaints? This action cannot be undone.');
        if (confirmation) {
          complaintsData.length = 0;
          saveComplaintsToLocalStorage();
          displayStatistics();
          displayComplaintsTable();
        }
      } else {
        alert('Only admin can clear complaints.');
      }
    }

    // Initialize admin window if the default admin credentials are used
    if (loggedInUser === 'cmsadmin') {
      document.getElementById('loginInfo').innerText = `Logged in as: ${loggedInUser}`;
      document.getElementById('adminContainer').style.display = 'block';

      // Display statistics
      displayStatistics();

      // Display complaints table
      displayComplaintsTable();
    }

    document.addEventListener('DOMContentLoaded', function () {
      // Your initialization code, e.g., calling displayStatistics or other setup functions
    });
   

  </script>
</body>
</html>
